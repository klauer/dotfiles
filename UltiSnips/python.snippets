priority 0

###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == '__main__':
    ${1:main()}$0
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
    ${3:...}
endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

def camelize(string: str, uppercase_first_letter: bool = True) -> str:
    # Borrowed from inflection
    """
    Convert strings to CamelCase.
    Examples::
        >>> camelize("device_type")
        'DeviceType'
        >>> camelize("device_type", False)
        'deviceType'
    :func:`camelize` can be thought of as a inverse of :func:`underscore`,
    although there are some cases where that does not hold::
        >>> camelize(underscore("IOError"))
        'IoError'
    :param uppercase_first_letter: if set to `True` :func:`camelize` converts
        strings to UpperCamelCase. If set to `False` :func:`camelize` produces
        lowerCamelCase. Defaults to `True`.
    """
    import re  # noqa
    if uppercase_first_letter:
        return re.sub(r"(?:^|_)(.)", lambda m: m.group(1).upper(), string)
    return string[0].lower() + camelize(string)[1:]

endglobal


global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
    def __init__(self, arg):
        self.arg = arg
        self.name = arg.split('=')[0].strip()

    def __str__(self):
        return self.name

    def __unicode__(self):
        return self.name

    def is_kwarg(self):
        return '=' in self.arg


def get_args(arglist):
    args = [Arg(arg) for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg.name != 'self']
    return args


def get_quoting_style(snip):
    style = snip.opt("g:ultisnips_python_quoting_style", "double")
    if style == 'single':
        return SINGLE_QUOTES
    return DOUBLE_QUOTES

def triple_quotes(snip):
    return get_quoting_style(snip) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
    """
    Generate triple quoted strings and handle any trailing quote char,
    which might be there from some autoclose/autopair plugin,
    i.e. when expanding ``"|"``.
    """
    if not snip.c:
        # Do this only once, otherwise the following error would happen:
        # RuntimeError: The snippets content did not converge: â€¦
        _, col = vim.current.window.cursor
        line = vim.current.line

        # Handle already existing quote chars after the trigger.
        _ret = quoting_style * 3
        while True:
            try:
                nextc = line[col]
            except IndexError:
                break
            if nextc == quoting_style and len(_ret):
                _ret = _ret[1:]
                col = col+1
            else:
                break
        snip.rv = _ret
    else:
        snip.rv = snip.c

def format_arg(snip, arg, style):
    snip += "%s : TODO" % arg
    snip.shift()
    snip += ''
    snip.unshift()


def format_return(snip, style):
    snip += "Returns"
    snip += "-------"
    snip += ""


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' {0}'.format(triple_quotes(snip))
        return

    snip.rv += '\n' + snip.mkline('', indent='')
    write_numpy_docstring_args(args, snip)


def write_numpy_docstring_args(args, snip):
    '''
    ref:
    https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
    '''
    kwargs = [arg for arg in args if arg.is_kwarg()]
    args = [arg for arg in args if not arg.is_kwarg()]

    if args or kwargs:
        snip += "Parameters"
        snip += "----------"

        if args:
            for arg in args:
                format_arg(snip, arg, NUMPY)

            if not kwargs:
                snip.rv += '\n' + snip.mkline('', indent='')

        if kwargs:
            for kwarg in kwargs:
                format_arg(snip, kwarg, NUMPY)
            snip.rv += '\n' + snip.mkline('', indent='')


def write_init_body(args, parents, snip):
    parents = any(p.strip() for p in parents.split(","))
    if parents:
        snip += 'super().__init__()'

    if parents:
        snip.rv += '\n' + snip.mkline('', indent='')

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
    args = ['"_%s"' % arg for arg in args]
    snip += '__slots__ = (%s,)' % ', '.join(args)


def write_function_docstring(t, snip):
    """
    Writes a function docstring with the current style.

    :param t: The values of the placeholders
    :param snip: UltiSnips.TextObjects.SnippetUtil object instance
    """
    snip.rv = ""
    snip >> 1

    args = get_args(t[2])
    if args:
        write_docstring_args(args, snip)

    format_return(snip, NUMPY)
    snip.rv += '\n' + snip.mkline('', indent='')
    snip += triple_quotes(snip)

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "class with docstrings" b
class ${1:MyClass}(${5:}):`!p
snip >> 1
snip += triple_quotes(snip)
snip += f'{t[1]}.'

args = get_args(t[4])
if args:
    write_docstring_args(args, snip)
snip.rv = snip.rv.rstrip()
snip += triple_quotes(snip)
`

    def __init__(self, $4):`!p
snip >> 2
args = get_args(t[4])
write_init_body(args, t[5], snip)
`
        $0
endsnippet


snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}(${2:object}):

    `!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

    def __init__(self$4):
        `!p snip.rv = triple_quotes(snip)`${5:...}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
    snip.rv += '\n' + snip.mkline('', indent='')
    snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
        $0
endsnippet


snippet contain "methods for emulating a container type" b
def __len__(self):
    ${1:...}

def __getitem__(self, key):
    ${2:...}

def __setitem__(self, key, value):
    ${3:...}

def __delitem__(self, key):
    ${4:...}

def __iter__(self):
    ${5:...}

def __reversed__(self):
    ${6:...}

def __contains__(self, item):
    ${7:...}
endsnippet


snippet context "context manager methods" b
def __enter__(self):
    ${1:...}

def __exit__(self, exc_type, exc_value, traceback):
    ${2:...}
endsnippet


snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
    ${1:...}

def __setattr__(self, name, value):
    ${2:...}

def __delattr__(self, name):
    ${3:...}
endsnippet


snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
    ${1:...}

def __set__(self, instance, value):
    ${2:...}

def __delete__(self, instance):
    ${3:...}
endsnippet


snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
    ${1:...}

def __ne__(self, other):
    ${2:...}

def __lt__(self, other):
    ${3:...}

def __le__(self, other):
    ${4:...}

def __gt__(self, other):
    ${5:...}

def __ge__(self, other):
    ${6:...}

def __cmp__(self, other):
    ${7:...}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
    ${1:...}

def __str__(self):
    ${2:...}

def __unicode__(self):
    ${3:...}
endsnippet


# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
    ${1:...}

def __sub__(self, other):
    ${2:...}

def __mul__(self, other):
    ${3:...}

def __div__(self, other):
    ${4:...}

def __truediv__(self, other):
    ${5:...}

def __floordiv__(self, other):
    ${6:...}


def __mod__(self, other):
    ${7:...}

def __divmod__(self, other):
    ${8:...}

def __pow__(self, other):
    ${9:...}


def __lshift__(self, other):
    ${10:...}

def __rshift__(self, other):
    ${11:...}

def __and__(self, other):
    ${12:...}

def __xor__(self, other):
    ${13:...}

def __or__(self, other):
    ${14:...}


def __neg__(self):
    ${15:...}

def __pos__(self):
    ${16:...}

def __abs__(self):
    ${17:...}

def __invert__(self):
    ${18:...}


def __complex__(self):
    ${19:...}

def __int__(self):
    ${20:...}

def __long__(self):
    ${21:...}

def __float__(self):
    ${22:...}


def __oct__(self):
    ${22:...}

def __hex__(self):
    ${23:...}


def __index__(self):
    ${24:...}

def __coerce__(self, other):
    ${25:...}
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    `!p snip.rv = triple_quotes(snip)`
    ${4:...}`!p
write_function_docstring(t, snip) `
    ${0:...}
endsnippet


snippet adef "async function with docstrings" b
async def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    `!p snip.rv = triple_quotes(snip)`
    ${4:...}`!p
write_function_docstring(t, snip) `
    ${0:...}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
    `!p snip.rv = triple_quotes(snip)`
    ${4:...}`!p
write_function_docstring(t, snip) `
    ${0:...}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
    `!p snip.rv = triple_quotes(snip)`
    ${4:...}`!p
write_function_docstring(t, snip) `
    ${0:...}
endsnippet


# doesn't expand when there is a word in front
# snippet /(^|(?<=\W))\./ "self." r
# self.
# endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet


##############
# PROPERTIES #
##############
snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
    ${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
@property
def ${1:name}():
    """
    ${2:...}
	"""
    ${0:return self._$1}

@$1.setter
def $1(self, $1):
    self._$1 = $1

endsnippet


##############
# CAPROTO    #
##############

# Moved to epics-ultisnips

####################
# If / Else / Elif #
####################
snippet if "If" b
if ${1:condition}:
    ${2:...}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
    ${2:...}
else:
    ${3:...}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
    ${2:...}
elif ${3:condition}:
    ${4:...}
else:
    ${5:...}
endsnippet


##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
    ${1:...}
except ${2:Exception} as ${3:ex}:
    ${4:raise $3}
endsnippet

snippet try "Try / Except / Else" b
try:
    ${1:...}
except ${2:Exception} as ${3:ex}:
    ${4:raise $3}
else:
    ${5:...}
endsnippet

snippet try "Try / Except / Finally" b
try:
    ${1:...}
except ${2:Exception} as ${3:ex}:
    ${4:raise $3}
finally:
    ${5:...}
endsnippet

snippet try "Try / Except / Else / Finally" b
try:
    ${1:...}
except${2: ${3:Exception} as ${4:ex}}:
    ${5:raise}
else:
    ${6:...}
finally:
    ${7:...}
endsnippet


#####################
# Assertions & Tests #
#####################

snippet pdb "Set PDB breakpoint" b
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "Set IPDB breakpoint" b
import IPython; IPython.core.debugger.Pdb.set_trace()
endsnippet

snippet pudb "Set PUDB breakpoint" b
import pudb; pudb.set_trace()
endsnippet

snippet ae "Assert equal" b
self.assertEqual(${1:first},${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${0:exp})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:expression})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:first},${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:func}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${0:expression})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${0:expression})
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):

    `!p snip.rv = triple_quotes(snip)`${3:Test case docstring.}`!p snip.rv = triple_quotes(snip)`

    def setUp(self):
        ${4:...}

    def tearDown(self):
        ${5:...}

    def test_${6:name}(self):
        ${7:...}
endsnippet

snippet " "triple quoted string (double quotes)" b
"""
${1:doc}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
'''
${1:doc}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:doc}
`!p snip.rv = triple_quotes(snip)`
endsnippet

snippet logger "module logger"
import logging

logger = logging.getLogger(__name__)
endsnippet

snippet module_path "module_path"
import pathlib

MODULE_PATH = pathlib.Path(__file__).parent
endsnippet
# vim:ft=snippets:
